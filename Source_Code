$NOLIST
$MODN76E003
$LIST

;  N76E003 pinout:
;                               -------
;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
;                         VDD -|9    12|- P1.3/SCL/[STADC]
;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
;                               -------
;

$NOLIST
$include(LCD_4bit.inc) ; A library of LCD related functions and utility macros
$include(math32.inc) ; Library of math funcs
;whatever else we need to include
$LIST


CLK           EQU 16600000 ; Microcontroller system frequency in Hz
TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE))) ;


TEMPSOAK_BUTTON		equ P1.  ;set to button pins/ delete
TIMESOAK_BUTTON		equ P1.
TEMPREFL_BUTTON		equ P1.
TIMEREFL_BUTTON		equ P1.
PWM_OUT 			equ P1. ; Logic 1 = Oven on --> whatever the oven is connected to


;-------------------;
;   vector jumps    ;
;-------------------;
; Reset vector
org 0x0000
    ljmp main

; Timer/Counter 0 overflow interrupt vector
org 0x000B
	ljmp Timer0_ISR

; Timer/Counter 2 overflow interrupt vector
org 0x002B
	ljmp Timer2_ISR




;-------------------;
;   lcd messages    ;
;-------------------;
;                     	1234567890123456    <- This helps determine the location of the counter
chillin_message:      	db 'State: Chillin  ', 0
ramp2soak_message:    	db 'State: Ramp2soak', 0
soak_message:         	db 'State: Soak     ', 0
ramp2peak_message:    	db 'State:', 0
reflow_message:    		db 'State:', 0
cooling_message			db 'State:', 0
error_message			db 'State:', 0
blank_message			db 'State:', 0

;-----------------------------------;
;   variable register definitions   ;
;-----------------------------------;
DSEG at 0x30
  ; These register definitions needed by 'math32.inc'
	temp:     ds 8
  	count:    ds 7
	last:     ds 6
	x:   	  ds 4
	y:        ds 4
	bcd:      ds 5
    VLED_ADC: ds 2
  ;these used for settable variables, make sure values over 10 still work
    fsm1_state: ds 13 ;state variable for fsm1
    tempsoak:   ds 12 ;150C +/- 20C
    timesoak:   ds 11 ;soak time <= 60s
    temprefl:   ds 10 ;240C > temp >= 220
    timerefl:   ds 9  ;45s > 

	seconds: ds 1 ; increments and displays seconds
	minutes: ds 1 ; increments and displays minutes
	state_seconds ds 1 ; increments and displays state seconds
	pwm_counter: ds 1
	pwm: ds 1


;---------------------------------;
; Routine to initialize the ISR   ;
; for timer 0                     ;
;---------------------------------;
Timer0_Init:
	orl CKCON, #0b00001000 ; Input for timer 0 is sysclk/1
	mov a, TMOD
	anl a, #0xf0 ; 11110000 Clear the bits for timer 0
	orl a, #0x01 ; 00000001 Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD)
	mov TL0, #low(TIMER0_RELOAD)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret


;---------------------------------;
; Routine to initialize the ISR   ;
; for timer 2                     ;
;---------------------------------;
Timer2_Init:
	mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
	mov TH2, #high(TIMER2_RELOAD)
	mov TL2, #low(TIMER2_RELOAD)
	; Set the reload value
	orl T2MOD, #0x80 ; Enable timer 2 autoreload
	mov RCMP2H, #high(TIMER2_RELOAD)
	mov RCMP2L, #low(TIMER2_RELOAD)
	; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
	clr a
	mov Count1ms+0, a
	mov Count1ms+1, a
	; Enable the timer and interrupts
	orl EIE, #0x80 ; Enable timer 2 interrupt ET2=1
    setb TR2  ; Enable timer 2
	ret


;---------------------------------;
; ISR for timer 2                 ;
;---------------------------------;
Timer2_ISR:
	clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in the ISR.  It is bit addressable.
	cpl P0.4 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
	
	; The two registers used in the ISR must be saved in the stack
	push acc
	push psw
	
	; Increment the 16-bit one mili second counter
	inc Count1ms+0    ; Increment the low 8-bits first
	mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
	jnz Inc_Done
	inc Count1ms+1
	inc pwm_counter
	
	clr c
	mov a, pwm ; percentage oven on
	subb a, pwm_counter ; If pwm_counter <= pwm then c=1
	cpl c 
	mov PWM_OUT, c 
	mov a, pwm_counter
	cjne a, #100, Inc_Done
	mov pwm_counter, #0

Inc_Done:
	mov a, Count1ms+0
	cjne a, #low(1000), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
	mov a, Count1ms+1
	cjne a, #high(1000), Timer2_ISR_done

	setb seconds_flag ; **** ADD TO MAIN PROGRAM ****

	; Reset to zero the milli-seconds counter, it is a 16-bit variable
	clr a
	mov Count1ms+0, a
	mov Count1ms+1, a

; Increment State Seconds
inc_state_seconds:
	mov a, state_seconds
	add a, #0x01
	mov state_seconds, a
	;cjne a, #0x60, inc_seconds ;
	;mov state_seconds, #0
	;sjmp inc_minutes

; Increment System Timer
inc_seconds:
	mov a, seconds
	add a, #0x01
	da a ; this instruction works only after the add or addc instructions
	mov seconds, a
	cjne a, #0x60, Timer2_ISR_done ;
    mov seconds, #0 	
	sjmp inc_minutes

inc_minutes:
	mov a, minutes
	add a, #0x01
	da a ; this instruction works only after the add or addc instructions
	mov minutes, a
	cjne a, #0x60, Timer2_ISR_done ; 
	mov minutes, #0

Timer2_ISR_done:
	pop psw
	pop acc
	reti    


;------------------------------------------------------------------------------;
; Start of the code, runs through initialization then enters the infinite loop ;    
;------------------------------------------------------------------------------;
main:
	; Initialization
    mov SP, #0x7F
    mov P0M1, #0x00
    mov P0M2, #0x00
    mov P1M1, #0x00
    mov P1M2, #0x00
    mov P3M2, #0x00
    mov P3M2, #0x00

	mov pwm_counter, #0 

    lcall Timer0_Init
    lcall Timer2_Init
    setb EA   ; Enable Global interrupts


;-----------------------------------------------------------------------------------;
; after the fist loop code stays in this loop, updates lcd -> math -> state machine ;    
;-----------------------------------------------------------------------------------;
Display:                    ;display values to ** LCD **, landing from state machine jumps
	mov a, state_seconds    ; State Timer
	mov b, #60 
	div ab                  ;Divide State Seconds Count by 60

	Set_Cursor(1, 4)        ; ** CHANGE AS NEEDED **
	Display_BCD(b)          ;Display remainder as seconds

	Set_Cursor(1, 12)       ; ** CHANGE AS NEEDED **
	Display_BCD(a)          ;Display result as minutes


	; System Timer
    Set_Cursor(1, 4)        ; ** CHANGE AS NEEDED **
	Display_BCD(minutes)

	Set_Cursor(1, 12)       ; ** CHANGE AS NEEDED **
	Display_BCD(seconds)


;------------------------------------------------------------------------------;
; displays the values of variables or current state depending on current state ;
;------------------------------------------------------------------------------;
    mov a, fsm1_state
    cjne a, #0, display_state1
    ;put state: chillin on screen

display_state1:
    cjne a, #1, display_state2
    ;put state: ramp2soak on screen

display_state2:
    cjne a, #2, display_state3
    ;put state: soak on screen

display_state3:
    cjne a, #3, display_state4
    ;put state: ramp2peak on screen

display_state4:
    cjne a, #4, display_state5
    ;put state: reflow on screen

display_state5:
    ;put state: reflow on screen


	ljmp fsm1       ;jump to start of state machine
    ;ljmp math      ;change to this line later


;---------------------;
; ** put math here ** ;    
;---------------------;  
;math:
;math stuff |
;           |
;ljmp fsm1



;need auto termination !!
;maybe in state 1, track the time and temp, jump if != 50C in 60s
;ie. set bit if auto termination cond met, and use jb to branch to state 0
;------------------------------------------------;
; State machine for each stage of reflow process ;
;------------------------------------------------;
fsm1:
;in case we have other fsms
    mov a, fsm1_state   ;movs the variable vaule of what state we are in to the accumulator


;------------------
chillin: ;state 0, "waiting" for a button push to start, 
         ;this is when the reflow profile need to be settable elsewhere
    cjne a, #0, ramp2soak       ;compare #0 and current state number (in a) jump to next state if not meant to be in state 0
    mov pwm, #0
    ;update variables with buttons
    update_tempsoak (shift_button, TEMPSOAK_BUTTON)
    update_timesoak (shift_button, TIMESOAK_BUTTON)
    update_temprefl (shift_button, TEMPREFL_BUTTON)
    update_temprefl (shift_button, TIMEREFL_BUTTON)
    ;### CALL SOMEMACRO TO UPDATE A FLAG BASED ON time=60 &temp<50 ###

    

    jb panic_button, chillin_done   ;keep looping if button not pushed, using panic button as on/off
    jnb panic_button, $             ;debounce
    mov fsm1_state, #1              ;set state to soak
chillin_done:   
    ljmp fsm1                       ;loops to display and updates display
                      


;------------------
ramp2soak: ;Heat up from 0, leave if temp<50 after 1min -> error
           ;leave after temp="tempsoak" -> soak
    cjne a, #1, soak 
    mov pwm, #100           ;oven on
    mov a, tempsoak         ;
    clr c                   ;clear carry
    subb a, temp            ;"tempsoak" - "temp"
    jnc ramp2soak_done      ;jump if result is not negative, ie. if temp < "tempsoak"
    mov fsm1_state, #2      ;set state to soak since "temp" > "tempsoak"
    mov state_seconds, #0   ;reset state state_seconds
ramp2soak_done:
    ljmp fsm1           

;------------------
soak: ;Keep temp relatively stable, leave after "timesoak" seconds -> ramp2peak
    cjne a, #2, ramp2peak
    mov pwm, #20        ;oven on 20% of the time
    mov a, timesoak     
    clr c
    subb a, state_seconds         ;"timesoak" - "state_seconds"
    jnc soak_done       ;stay in this state if "state_seconds" < "timesoak"
    mov fsm1_state, #3  ;set state to ramp2peak
    mov state_seconds, #0   ;reset state state_seconds
soak_done:
    ljmp fsm1

;------------------
ramp2peak:
    cjne a, #3, reflow
    mov pwm, #100           ;oven on
    mov a, temprefl  
    clr c
    subb a, temp            ;"temprefl" - "temp"
    jnc ramp2peak_done      ;stay in this state if "temp" < "temprefl" 
    mov fsm1_state, #4      ;set state to reflow
    mov state_seconds, #0
ramp2peak_done:
    ljmp fsm1

;------------------
reflow:
    cjne a, #4, cooling
    mov pwm, #30
    mov a, timerefl
    clr c
    subb a, state_seconds   ;"timerefl"- "state_seconds"
    jnc reflow_done
    mov fsm1_state, #5      ;set state to cooling
    mov state_seconds, #0
reflow_done:
    ljmp fsm1

;------------------
cooling:
    cjne a, #5, error       ;error because this should not happen,        ## check here if going to error randomly ###
    mov pwm, #0             ;oven off
    mov a, temp          
    clr c 
    subb a, #0x60           ;### temp to stop cooling at, change later ###
    jnc cooling_done        ;done cooling if "temp" - "60" < 0
    mov fsm_state, #6       ;change from #6 as #6 is error state
    mov state_seconds, #0
cooling_done:
    ljmp fsm1

;------------------
error: ;exited on error, stuck in this state until "panic button" pressed
    ;display some error message
    mov pwm, #0             ; oven off
    jb panic_button, error  ;if "panic_button" not pressed, stuck here
    jnb panic_button, $     ;debounce
    mov fsm_state, #0       ;go back to chillin state
    mov state_seconds, #0
error_done:
    ljmp fsm1
