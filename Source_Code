$NOLIST
$MODN76E003
$LIST


;-------------------;
;   vector jumps    ;
;-------------------;
; Reset vector
org 0x0000
    ljmp main

; Timer/Counter 0 overflow interrupt vector
;org 0x000B
	;ljmp Timer0_ISR     ;we dont use this i think?

; Timer/Counter 2 overflow interrupt vector
org 0x002B
	ljmp Timer2_ISR


;---------------------------;
;   LCD Display Preview     ;
;---------------------------;
;
;   SCREEN IN WAITING STATE
;1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16
;--------------------------------------;
;T : x x x C                           ;
;s x x x , x x   r x  x  x  ,  x  x    ;
;--------------------------------------;
;soak temp,time reflow temp,time
;
;   SCREEN WHILE RUNNING SYSTEM
;1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16
;--------------------------------------;
;T : x x x C             x  x  :  x  x ;
;S t a t e :   x x x  x  x  x  x  x    ; 
;--------------------------------------;
;
;soak temp,time reflow temp,time


;-------------------;
;  N76E003 pinout   ;
;-------------------;
;                               -------
;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3                                                                                        
;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
;                         VDD -|9    12|- P1.3/SCL/[STADC]
;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
;                               -------
; Note: pin 6 & pin 14 reserved for ADC input


$NOLIST
$include(LCD_4bit.inc)         ; A library of LCD related functions and utility macros
$include(math32.inc)           ; Library of math funcs
$include(Project1_Macros.inc)  ; Our custom macros
$LIST


CLK           EQU 16600000                      ; Microcontroller system frequency in Hz
TIMER0_RATE   EQU 4096                          ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
TIMER2_RATE   EQU 1000                          ; 1000Hz, for a timer tick of 1ms
TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
BAUD          EQU 115200                        ; Baud rate of UART in bps
PAGE_ERASE_AP   EQU 00100010b
BYTE_PROGRAM_AP EQU 00100001b

    
;-----------------------------------;
;   variable register definitions   ;
;-----------------------------------;
DSEG at 0x30
  ; These register definitions needed by 'math32.inc'
	temp:     ds 8
  	count:    ds 7
	last:     ds 6
	x:   	  ds 4
	y:        ds 4
	bcd:      ds 5
    VLED_ADC: ds 2
	Count1ms: ds 14 
    
  ; these used for settable variables, make sure values over 10 still work
    fsm1_state: ds 13 ; state variable for fsm1
    tempsoak:   ds 12 ; 150C +/- 20C
    timesoak:   ds 11 ; soak time <= 60s
    temprefl:   ds 10 ; 240C > temp >= 220
    timerefl:   ds 9  ; 45s > 

	seconds:        ds 1 ; increments and displays seconds
	minutes:        ds 1 ; increments and displays minutes
	state_seconds:  ds 1 ; increments and displays state seconds
	pwm_counter:    ds 1
	pwm:            ds 1


;------------------------------------------------------------------------------------------------------;
;   **These eight bit variables store the value of the pushbuttons after calling 'ADC_to_PB' below     ;
;------------------------------------------------------------------------------------------------------;
bseg																							 
; PUSH BUTTON FLAGS:																			 
; (matches push button values)																	 
incdec_flag:    dbit 1 ; controller set so shiftpb increases counters if 0, decrease if 1					 
temprefl_flag:  dbit 1 ; controller set to adjust temprefl if 0									 
timerfl_flag:   dbit 1 ; controller set to adjust timerfl if 0									 
tempsoak_flag:  dbit 1 ; controller set to adjust temprefl if 0									 
timesoak_flag:  dbit 1 ; controller set to adjust timesoak if 0									 
setup_flag:     dbit 1 ; controller set to adjust counters	(so users can't adjust mid reflow)		 
pwm_flag:       dbit 1 ; start/stop switch, 0 if start, 1 if stop                          			    																	 
shiftpb:        dbit 1 ; button to increase and decrease the counters                                  
error_flag:     dbit 1 ; set to one if an error occurs
mf:             dbit 1 
seconds_flag:   dbit 1
timerefl_flag:  dbit 1


;-------------------;
;   Pin Settings    ;
;-------------------;
cseg
; These 'equ' must match the hardware wiring
LCD_RS          equ P1.3
LCD_E           equ P1.4
LCD_D4          equ P0.0
LCD_D5          equ P0.1
LCD_D6          equ P0.2
LCD_D7          equ P0.3
PWM_OUT         equ P1.0
panic_button    equ P1.6


;-----------------------;
;   ADC initialization  ;
;-----------------------;
Init_ADC:                           
; Initialize button ADC input                                                       
; AIN0 is connected to P3.0. Configure P1.7 as input.
orl	P3M1, #0b0000001
anl	P3M2, #0b1111110                                                                   

; AINDIDS select if some pins are analog inputs or digital I/O:                              
mov AINDIDS, #0x00          ;Disable all analog inputs                                               
orl AINDIDS, #0b00000010    ; Using AIN1                                                        
orl ADCCON1, #0x01          ;Enable ADC                                                                                                                                                       

; Initialize thermocouple ADC input   
; Initialize the pin used by the ADC (P1.1) as input.
orl	P1M1, #0b00000010
anl	P1M2, #0b11111101

; Might only need second line because first line's done in macro???
; Initialize and start the ADC:
anl ADCCON0, #0xF0
orl ADCCON0, #0x07 ; Select channel 7

; Don't need first line because its altempsiy done above?    
; AINDIDS select if some pins are analog inputs or digital I/O:
; mov AINDIDS, #0x00 ; Disable all analog inputs
orl AINDIDS, #0b10000000 ; P1.1 is analog input
orl ADCCON1, #0x01 ; Enable ADC
ret              


;-------------------;
;   lcd messages    ;
;-------------------;
;                     	    1234567890123456    <- This helps determine the location of the counter
chillin_message:      	DB 'State: Chillin  ', 0
ramp2soak_message:    	DB 'State: Ramp2soak', 0
soak_message:         	DB 'State: Soak     ', 0
ramp2peak_message:    	DB 'State: Ramp2peak', 0
reflow_message:    		DB 'State: Reflow   ', 0
cooling_message:		DB 'State: Cooling  ', 0
error_message:			DB 'State: ERROR    ', 0
blank_message:			DB '                ', 0
volt_message:           DB 'VOLT:          V', 0
temp_message:           DB 'TEMP:          C', 0
Dot:                    DB '.'               , 0
New_Line:               DB '\n'              , 0 
format_message:			DB 's   ,   r   ,   ', 0


;---------------------------------;
; Routine to initialize the ISR   ;
; for timer 0                     ;
;---------------------------------;
Timer0_Init:
	orl CKCON, #0b00001000 ; Input for timer 0 is sysclk/1
	mov a, TMOD
	anl a, #0xf0 ; 11110000 Clear the bits for timer 0
	orl a, #0x01 ; 00000001 Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD)
	mov TL0, #low(TIMER0_RELOAD)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret


;---------------------------------;
; Routine to initialize the ISR   ;
; for timer 2                     ;
;---------------------------------;
Timer2_Init:
	mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
	mov TH2, #high(TIMER2_RELOAD)
	mov TL2, #low(TIMER2_RELOAD)
	; Set the reload value
	orl T2MOD, #0x80 ; Enable timer 2 autoreload
	mov RCMP2H, #high(TIMER2_RELOAD)
	mov RCMP2L, #low(TIMER2_RELOAD)
	; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
	clr a
	mov Count1ms+0, a
	mov Count1ms+1, a
	; Enable the timer and interrupts
	orl EIE, #0x80 ; Enable timer 2 interrupt ET2=1
    setb TR2  ; Enable timer 2
	ret


;---------------------------------;
; ISR for timer 2                 ;
;---------------------------------;
Timer2_ISR:
	clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in the ISR.  It is bit addressable.
	cpl P0.4 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
	
	; The two registers used in the ISR must be saved in the stack
	push acc
	push psw
	
	; Increment the 16-bit one mili second counter
	inc Count1ms+0    ; Increment the low 8-bits first
	mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
	jnz Inc_Done
	inc Count1ms+1
	inc pwm_counter

	; PWM_OUT -> (P1.0) Connected to the oven
	clr c                   ; clear carry
	mov a, pwm              ; percentage of oven on to a
	subb a, pwm_counter     ; If pwm_counter <= pwm then c = 1
	cpl c 
	mov PWM_OUT, c          ; logic 1 = oven on
	mov a, pwm_counter
	cjne a, #100, Inc_Done  ; if pwm counter = 100 reset
	mov pwm_counter, #0     ; reset if counter at 100

Inc_Done:
	mov a, Count1ms+0
	cjne a, #low(1000), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
	mov a, Count1ms+1
	cjne a, #high(1000), Timer2_ISR_done

	setb seconds_flag 

	; Reset to zero the milli-seconds counter, it is a 16-bit variable
	clr a
	mov Count1ms+0, a
	mov Count1ms+1, a

; Increment State Seconds
inc_state_seconds:
	mov a, state_seconds
	add a, #0x01
	mov state_seconds, a
	;cjne a, #0x60, inc_seconds ;
	;mov state_seconds, #0
	;sjmp inc_minutes

; Increment System Timer
inc_seconds:
	mov a, seconds
	add a, #0x01
	da a ; this instruction works only after the add or addc instructions
	mov seconds, a
	cjne a, #0x60, Timer2_ISR_done ;
    mov seconds, #0 	
	sjmp inc_minutes

inc_minutes:
	mov a, minutes
	add a, #0x01
	da a ; this instruction works only after the add or addc instructions
	mov minutes, a
	cjne a, #0x60, Timer2_ISR_done ; 
	mov minutes, #0

Timer2_ISR_done:
	pop psw
	pop acc
	reti    


;-------------------------------------------;
;   save varibles in non-volatile memory    ;
;-------------------------------------------;
Save_Variables:
	CLR EA  ; MUST disable interrupts for this to work!
	
	MOV TA, #0aah               ; CHPCON is TA protected
	MOV TA, #55h
	ORL CHPCON, #00000001b      ; IAPEN = 1, enable IAP mode
	
	MOV TA, #0aah               ; IAPUEN is TA protected
	MOV TA, #55h
	ORL IAPUEN, #00000001b      ; APUEN = 1, enable APROM update
	
	MOV IAPCN, #PAGE_ERASE_AP   ; Erase page 3f80h~3f7Fh
	MOV IAPAH, #3fh
	MOV IAPAL, #80h
	MOV IAPFD, #0FFh
	MOV TA, #0aah               ; IAPTRG is TA protected
	MOV TA, #55h
	ORL IAPTRG, #00000001b      ; write 1 to IAPGO to trigger IAP process
	
	MOV IAPCN, #BYTE_PROGRAM_AP
	MOV IAPAH, #3fh
	
	;Load 3f80h with variable_1
	MOV IAPAL, #80h
	MOV IAPFD, tempsoak
	MOV TA, #0aah
	MOV TA, #55h
	ORL IAPTRG,#00000001b
	
	;Load 3f81h with variable_2
	MOV IAPAL, #81h
	MOV IAPFD, timesoak
	MOV TA, #0aah
	MOV TA, #55h
	ORL IAPTRG,#00000001b
	
	;Load 3f82h with variable_3
	MOV IAPAL, #82h
	MOV IAPFD, temprefl
	MOV TA, #0aah
	MOV TA, #55h
	ORL IAPTRG,#00000001b
	
	;Load 3f83h with variable_4
	MOV IAPAL, #83h
	MOV IAPFD, timerefl
	MOV TA, #0aah
	MOV TA, #55h
	ORL IAPTRG,#00000001b

	;Load 3f84h with 55h
	MOV IAPAL,#84h
	MOV IAPFD, #55h
	MOV TA, #0aah
	MOV TA, #55h
	ORL IAPTRG, #00000001b

	;Load 3f85h with aah
	MOV IAPAL, #85h
	MOV IAPFD, #0aah
	MOV TA, #0aah
	MOV TA, #55h
	ORL IAPTRG, #00000001b

	MOV TA, #0aah
	MOV TA, #55h
	ANL IAPUEN, #11111110b ; APUEN = 0, disable APROM update
	MOV TA, #0aah
	MOV TA, #55h
	ANL CHPCON, #11111110b ; IAPEN = 0, disable IAP mode
	
	setb EA  ; Re-enable interrupts

	ret
    
Load_Variables:
	mov dptr, #0x3f84  ; First key value location.  Must be 0x55
	clr a
	movc a, @a+dptr
	cjne a, #0x55, Load_Defaults
	inc dptr      ; Second key value location.  Must be 0xaa
	clr a
	movc a, @a+dptr
	cjne a, #0xaa, Load_Defaults
	
	mov dptr, #0x3f80
	clr a
	movc a, @a+dptr
	mov tempsoak, a
	
	inc dptr
	clr a
	movc a, @a+dptr
	mov timesoak, a
	
	inc dptr
	clr a
	movc a, @a+dptr
	mov temprefl, a
	
	inc dptr
	clr a
	movc a, @a+dptr
	mov timerefl, a
	ret

Load_Defaults:
	mov tempsoak, #1
	mov timesoak, #2
	mov temprefl, #3
	mov timerefl, #4
	ret

    
;-----------------------;
;   send string func    ;
;-----------------------;
SendString:
    clr A
    movc A, @A+DPTR
    jz SendStringDone
    lcall putchar
    inc DPTR
    sjmp SendString
SendStringDone:
    ret	


; Send a character using the serial port
putchar:
    jnb TI, putchar
    clr TI
    mov SBUF, a
    ret
    
;------------------------------------------------------------------------------;
; Start of the code, runs through initialization then enters the infinite loop ;    
;------------------------------------------------------------------------------;
main:
	; Initialization
    mov SP, #0x7F
    mov P0M1, #0x00
    mov P0M2, #0x00
    mov P1M1, #0x00
    mov P1M2, #0x00
    mov P3M2, #0x00
    mov P3M2, #0x00

	mov pwm_counter, #0 
    lcall Init_ADC
    lcall Timer0_Init
    lcall Timer2_Init
    lcall LCD_4BIT
    setb EA ; Enable Global interrupts
    
    ; clear all flags
    clr incdec_flag					 
    clr temprefl_flag							 
    clr timerfl_flag								 
    clr tempsoak_flag								 
    clr timesoak_flag
    clr setup_flag	 
    clr pwm_flag
    clr shiftpb
    clr error_flag
    clr mf
    
;-----------------------------------------------------------------------------------;
;   Displays the values of variables or current state depending on current state    ;
;           also main loop that loops infinitly after initialization                ;
;                    display -> math -> send_to_port -> fsm1                        ; 
;-----------------------------------------------------------------------------------; 
display:                    ; display values to ** LCD **, landing from state machine jumps
	mov a, state_seconds    ; State Timer
	mov b, #60 
	div ab                  ; Divide State Seconds Count by 60

	Set_Cursor(1, 4)        ; ** CHANGE AS NEEDED **
	Display_BCD(b)          ; Display remainder as seconds

	Set_Cursor(1, 12)       ; ** CHANGE AS NEEDED **
	Display_BCD(a)          ; Display result as minutes

	; System Timer
    Set_Cursor(1, 4)        ; ** CHANGE AS NEEDED **
	Display_BCD(minutes)

	Set_Cursor(1, 12)       ; ** CHANGE AS NEEDED **
	Display_BCD(seconds)
   
    clr a
    mov a, fsm1_state
    cjne a, #0, display_state1

    ; Put variables on screen since we are in the state where we can set variables
    ;s x x x , x x   r x  x  x  ,  x  x    ;
    
    ; display soak time and temp
    Set_Cursor(2,2)
	Display_BCD(tempsoak+1)
    Display_BCD(tempsoak+0)
	Set_Cursor(2,6)
	Display_BCD(timesoak)

    ; display reflow time and temp
    Set_Cursor(2,10)
	Display_BCD(temprefl+1)
    Display_BCD(temprefl+0)
	Set_Cursor(2,14)
	Display_BCD(timerefl)

    ; displays formatting "s , r"
    Set_Cursor(2, 1)
    Send_Constant_String(#format_message) ; do last to overwrite zeros
    ljmp done_display

display_state1:
    Set_Cursor(2, 1)                                    ; set the cursor position for messages
    cjne a, #1, display_state2              
    Send_Constant_String(#ramp2soak_message)            ; put ""State: Ramp2Soak"" on screen
    ljmp done_display

display_state2:
    cjne a, #2, display_state3
    Send_Constant_String(#soak_message)                 ; put ""State: Soak"" on screen
    ljmp done_display

display_state3:
    cjne a, #3, display_state4
    Send_Constant_String(#ramp2peak_message)    ; put ""State: Ramp2Peak"" on screen
    ljmp done_display

display_state4:
    cjne a, #4, display_state5
    Send_Constant_String(#reflow_message)               ;  put ""State: Reflow"" on screen
    ljmp done_display

display_state5:
    cjne a, #5, launchpad1
    Send_Constant_String(#cooling_message)              ; put ""State: Cooling"" on screen
    ljmp done_display
launchpad1:
	ljmp error
	
done_display:
    ljmp math


;---------------------------------------------------; 
; This is where we read temp & display temp on LCD  ;
;---------------------------------------------------; 
Read_ADC:
	clr ADCF
	setb ADCS ;  ADC start trigger signal
    jnb ADCF, $ ; Wait for conversion complete
    
    ; Read the ADC result and store in [R1, R0]
    mov a, ADCRH   
    swap a
    push acc
    anl a, #0x0f
    mov R1, a
    pop acc
    anl a, #0xf0
    orl a, ADCRL
    mov R0, A
    ret

math:
    ; Reads the average ADC value
	Load_x(0)
	mov R5, #100
Sum_loop0:
	lcall Read_ADC
	mov y+3, #0
	mov y+2, #0
	mov y+1, R1
	mov y+0, R0
	lcall add32
	djnz R5, Sum_loop0
	load_y(100)
	lcall div32

    ; Convert ADC reading to voltage value
    load_Y(50980) ; Multiply VCC voltage measured (5.1)
	lcall mul32
	load_Y(4095); Divide result by 4095
	lcall div32 

    ; Use 'magic number' to convert voltage to temperature 
	; Resistors used: R1 ~= 21.6kOhm, R2 ~= 97.75kOhm   
	load_Y(111465) ; 111.4646
	lcall mul32 ; multiply by 1000000/(R1/R2 * 40.6)
	load_Y(1000)
	lcall div32 
    load_Y(220000)
    lcall add32 ; Add 22 V (amb temp)
    ; x now has temp

    ; Put temperature into 'temp' variable
    mov a, x 
    mov temp, a

    ; Display temperature on LCD
    ; Looks like: 'T:022C          '
    lcall hex2bcd
    Set_Cursor(1, 2)
    Display_BCD(bcd+3)
	Display_BCD(bcd+2)
	; Display_char(#'.')
	; Display_BCD(bcd+1)
	; Display_BCD(bcd+0)
    Set_Cursor(1,1)
    Display_char(#'T')
    Set_Cursor(1,2)
    Display_char(#':')
    Set_Cursor(1,6)
    Display_char(#'C')

ljmp send_to_port


;-------------------------------;
;   Send temp to serial port    ;
;-------------------------------;

send_to_port:
    ; Port readings should be: xxxx.xx\n (temp.state)
    ;                          12345678
    Send_BCD(bcd+3)                 ; 12
    Send_BCD(bcd+2)                 ; 34
    mov DPTR, #Dot          
    lcall SendString                      ; 5
    Send_BCD(fsm1_state)            ; 67
    mov DPTR, #New_Line 
    lcall SendString                      ; 8
    ljmp fsm1    

;------------------------------------------------;
; State machine for each stage of reflow process ;
;------------------------------------------------;  
fsm1:
    mov a, fsm1_state   ; movs the variable value of what state we are in to the accumulator

;-----------------------
chillin: ; state 0, "waiting" for a button push to start, 
         ; this is when the reflow profile need to be settable elsewhere
    cjne a, #0, launchpad2   ; compare #0 and current state number (in a) jump to next state if not meant to be in state 0
    mov pwm, #0
launchpad2:
	ljmp ramp2soak
	
    lcall Load_Variables    ; Get the old variable values stored in flash memory

    ; update variables with buttons
    ADC_to_PB(setup_flag, incdec_flag, temprefl_flag, timerfl_flag, tempsoak_flag, timesoak_flag, pwm_flag)
    jnb setup_flag, setupskip
    ADC_incdec(shiftpb)
    jnb shiftpb, setupskip ; if they didn't press the shiftpb, we skip these functions :,(
    TempSoakSet(tempsoak, tempsoak_flag, incdec_flag)  ; calls macros to update settable variables
    TimeSoakSet(timesoak, timesoak_flag, incdec_flag)  ; |
    temprflSet(temprefl, temprefl_flag, incdec_flag)    ;|
    TimeRflSet(timerefl, timerefl_flag, incdec_flag)     ; -

    lcall Save_Variables ; Save the new values into flash memory

    CMPTempTime(state_seconds, temp, error_flag) ; updates error_flag based on whether time >= 60 and temp < 50

    setupskip:
    jb pwm_flag, chillin_done      ; keep looping if button not pushed, using panic button as on/off
    jnb pwm_flag, $                ; debounce
    mov fsm1_state, #1             ; set state to soak
chillin_done:   
    ljmp display                   ; loops to display and updates display
                      
;-----------------------
ramp2soak: ; Heat up from 0, leave if temp<50 after 1min -> error
           ; leave after temp="tempsoak" -> soak
    cjne a, #1, soak 
    mov pwm, #100           ; oven on
    mov a, tempsoak         
    clr c                   ; clear carry
    subb a, temp            ; "tempsoak" - "temp"
    jnc ramp2soak_done      ; jump if result is not negative, ie. if temp < "tempsoak"
    mov fsm1_state, #2      ; set state to soak since "temp" > "tempsoak"
    mov state_seconds, #0   ; reset state state_seconds
ramp2soak_done:
    ljmp display           

;-----------------------
soak: ; Keep temp relatively stable, leave after "timesoak" seconds -> ramp2peak
    cjne a, #2, ramp2peak
    mov pwm, #20            ; oven on 20% of the time
    mov a, timesoak     
    clr c
    subb a, state_seconds   ; "timesoak" - "state_seconds"
    jnc soak_done           ; stay in this state if "state_seconds" < "timesoak"
    mov fsm1_state, #3      ; set state to ramp2peak
    mov state_seconds, #0   ; reset state state_seconds
soak_done:
    ljmp display
;-----------------------
ramp2peak:
    cjne a, #3, reflow
    mov pwm, #100           ; oven on
    mov a, temprefl  
    clr c
    subb a, temp            ; "temprefl" - "temp"
    jnc ramp2peak_done      ; stay in this state if "temp" < "temprefl" 
    mov fsm1_state, #4      ; set state to reflow
    mov state_seconds, #0
ramp2peak_done:
    ljmp display

;-----------------------
reflow:
    cjne a, #4, cooling
    mov pwm, #30
    mov a, timerefl
    clr c
    subb a, state_seconds   ; "timerefl"- "state_seconds"
    jnc reflow_done
    mov fsm1_state, #5      ; set state to cooling
    mov state_seconds, #0
reflow_done:
    ljmp display

;-----------------------
cooling:
    cjne a, #5, error       ; error because this should not happen,        ## check here if going to error randomly ###
    mov pwm, #0             ; oven off
    mov a, temp          
    clr c 
    subb a, #0x60           ; ### temp to stop cooling at, change later ###
    jnc cooling_done        ; done cooling if "temp" - "60" < 0
    mov fsm1_state, #6      ; change from #6 as #6 is error state
    mov state_seconds, #0
cooling_done:
    ljmp display

;-----------------------
error: ; exited on error, stuck in this state until "panic button" pressed
    ; display some error message
    mov pwm, #0             ; oven off
    jb panic_button, error  ; if "panic_button" not pressed, stuck here
    jnb panic_button, $     ; debounce
    mov fsm1_state, #0      ; go back to chillin state
    mov state_seconds, #0
    clr error_flag
error_done:
    ljmp display

END
